1.	Test time needed for the Matrix4D::ToString() method
2.	Create a nice design for loading 3D models
3.	Config map of values should be refreshed once in a while, so that configuration values can be reconfigured during runtime.
4.	Don't use hard-coded values. Ever!
5.	Improve logging functionality. Maybe Log class should be a parent for all different kinds of logging classes. In a possible scenario some class X would register to one of this logging classes (with some logging level) and this way whenever some X member function is called (and/or finished) log would appear automatically. This way we could achieve a better isolation of concerns from the actual algorithm and logging.
6.	Memory deallocation
7.	Filename class member variable in several resource-related classes should be moved to their base class (which for now is called ReferenceCounter, but should be renamed to e.g. Resource)
8.	Create a possibility to display a light direction (current solution does not work correctly)
9.	Create a script probing the application and creating a report on how much CPU and memory it uses.
10.	Expand the CameraBar using AntTweakBar library with rotation of the selected camera.
11.	Read about "Light space perspective shadow maps" and "Shadow volumes" (for enabling shadows in point lights)
12.	HUD/GUI
13.	Text alignment
14.	Skybox is not seamless
15.	Text shader should automatically detects window size. Even better would be to calculate vertex coordinates in world space on CPU and not in the shader.
16.	Create a decorator class (http://en.wikipedia.org/wiki/Decorator_pattern#C.2B.2B) for the GameManager::Load method. The decorator sets/checks the state of the GameManager::m_isGameLoaded member variable, calls the GameManager::Load method and sets/checks the state of the GameManager::m_isGameLoaded member variable again.
17.	Move ISort class to Sorting namespace.
18.	Move SortingKey and SortingDirection enums to Sorting namespace. Also, move their definitions to the ISort.h file.
19.	Create statistics class.
20.	The constructor of Math::Angle class should still define the parameter Unit, but actually all angles should be stored in RADIANS, because it prevents us unnecessary conversion from one unit to another. Generally speaking, the conversions between RADIANS and DEGREES should be minimized. First, count the number of calls to ToRad and ToDeg functions in the running application. Then try to minimize it.
21.	The night texture should be displayed much later than right now.
22.	Use forwardlighting.vsh in the forward-ambient.glsl
23.	Use alpha maps for the terrain (and generally for all objects with multitexturing). The alpha map is just another texture with 4 channels (RGBA). Each channel represents how much of the specific texture should be applied on an object. Basically the result should be something like (texture1 * alphaMap.r + texture2 * alphaMap.g + ... ). This way an object may be textured with up to 4 different textures.
24.	Water rendering. DU/DV maps.
25.	Use QueryPerformanceCounter() instead of clock() function when measuring time. It is more accurate.
26.	Optimize loading meshes (e.g. "\\Models\\terrain02.obj").